{
  "address": "0xC0Fc1E9e5cb599f4bc31b8A3961b7C7c7a45dAc7",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        }
      ],
      "name": "MintNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isWhiteList",
          "type": "bool"
        }
      ],
      "name": "WhitelistModeChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "boostRates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipiant",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        }
      ],
      "name": "payToMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipiant",
          "type": "address"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        }
      ],
      "name": "payToWhiteMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reveal",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        }
      ],
      "name": "safeMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "setPlaceHolderURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "setPresalePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "setPublicSalePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setReveal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "mode",
          "type": "bool"
        }
      ],
      "name": "setWhiteListMode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        }
      ],
      "name": "setWhitelistRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "leaf",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "verifyWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistSaleAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf70935f872bb2eef426eca4634f6e16ab9c08999e7a4a46a49ca887dcb0c1f10",
  "receipt": {
    "to": null,
    "from": "0xea2c692a6E2525d7268Ebf864B61C5938271411c",
    "contractAddress": "0xC0Fc1E9e5cb599f4bc31b8A3961b7C7c7a45dAc7",
    "transactionIndex": 49,
    "gasUsed": "2496400",
    "logsBloom": "0x
    "blockHash": "0x5ee11fc678ecbc9bf5a6a0fb97d5d275c030c388cce30994df4419b1863e1609",
    "transactionHash": "0xf70935f872bb2eef426eca4634f6e16ab9c08999e7a4a46a49ca887dcb0c1f10",
    "logs": [
      {
        "transactionIndex": 49,
        "blockNumber": 964685,
        "transactionHash": "0xf70935f872bb2eef426eca4634f6e16ab9c08999e7a4a46a49ca887dcb0c1f10",
        "address": "0xC0Fc1E9e5cb599f4bc31b8A3961b7C7c7a45dAc7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ea2c692a6e2525d7268ebf864b61c5938271411c"
        ],
        "data": "0x",
        "logIndex": 143,
        "blockHash": "0x5ee11fc678ecbc9bf5a6a0fb97d5d275c030c388cce30994df4419b1863e1609"
      }
    ],
    "blockNumber": 964685,
    "cumulativeGasUsed": "11246191",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "458203af0ddf33eb65875a1e69467ef0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"MintNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isWhiteList\",\"type\":\"bool\"}],\"name\":\"WhitelistModeChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boostRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipiant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"payToMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipiant\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"payToWhiteMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reveal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setPlaceHolderURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPresalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPublicSalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setReveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"mode\",\"type\":\"bool\"}],\"name\":\"setWhiteListMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"setWhitelistRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"verifyWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistSaleAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AgsNFT.sol\":\"AgsNFT\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/AgsNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\n// \\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\\n// \\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// \\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n// \\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\\n// \\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n// \\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n// \\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\\n// \\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\\n// \\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\\n// \\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n// \\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\\n//\\ncontract AgsNFT is ERC721, Ownable {\\r\\n    using Counters for Counters.Counter;\\r\\n    using Strings for uint256;\\r\\n\\r\\n    Counters.Counter private _tokenIdCounter;\\r\\n    bool private _whitelistActive;\\r\\n    bytes32 private _root;\\r\\n\\r\\n    uint256 private presalePrice = 1 * 10 ** 18; // 500 ASTR\\r\\n    uint256 private publicSalePrice  = 1.5 * 10 ** 16; // 750 ASTR\\r\\n\\r\\n    string private _strBaseTokenURI;\\r\\n    string private _placeholderURI;\\r\\n\\r\\n    bool public reveal = false;\\r\\n\\r\\n    uint public boostRates;\\r\\n\\r\\n    event WhitelistModeChanged(bool isWhiteList);\\r\\n    event MintNFT(address indexed _to, uint256 _number);\\r\\n\\r\\n    constructor() ERC721(\\\"Alter Grimace Society NFT\\\", \\\"AGS\\\") {\\r\\n        _root = 0x7036c18b7148a5450c499d5c83cf6dac05902701bbbca399f37345095ecf0dcb;\\r\\n        _strBaseTokenURI = \\\"https://gateway.pinata.cloud/ipfs/QmUgRD6jkM5kfJM6CcTFeve97tibimnSp3iPQzUC1Rnskf/\\\";\\r\\n        _placeholderURI = \\\"https://gateway.pinata.cloud/ipfs/QmQTFBL4DENFgqGU2VZPy4GZAj2MTmzDdsoDjrS46AkHxT\\\";\\r\\n        _whitelistActive = true;\\r\\n    }\\r\\n\\r\\n    function _baseURI() internal view override returns (string memory) {\\r\\n        return _strBaseTokenURI;\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string memory uri) external onlyOwner {\\r\\n        _strBaseTokenURI = uri;\\r\\n    }\\r\\n\\r\\n    function setPlaceHolderURI(string memory uri) external onlyOwner {\\r\\n        _placeholderURI = uri;\\r\\n    }\\r\\n\\r\\n    function setReveal(bool value) external onlyOwner {\\r\\n        reveal = value;\\r\\n    }\\r\\n\\r\\n    function maxSupply() public pure returns (uint256) {\\r\\n        return 4888;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _tokenIdCounter.current();\\r\\n    }\\r\\n\\r\\n    function whitelistSaleAmount() public pure returns (uint256) {\\r\\n        return 1000;\\r\\n    }\\r\\n\\r\\n    function price() public view returns (uint256) {\\r\\n        if (_whitelistActive) {\\r\\n            return presalePrice;\\r\\n        }\\r\\n\\r\\n        return publicSalePrice;\\r\\n    }\\r\\n\\r\\n    function setPresalePrice(uint _price) external onlyOwner {\\r\\n        presalePrice = _price;\\r\\n    }\\r\\n\\r\\n    function setPublicSalePrice(uint _price) external onlyOwner {\\r\\n        publicSalePrice = _price;\\r\\n    }\\r\\n\\r\\n    function safeMint(address to, uint256 number) public onlyOwner {\\r\\n        for (uint256 i = 0; i < number; i++) {\\r\\n            uint256 tokenId = _tokenIdCounter.current();\\r\\n            _tokenIdCounter.increment();\\r\\n            _safeMint(to, tokenId);\\r\\n        }\\r\\n\\r\\n        emit MintNFT(to, number);\\r\\n        // _setTokenURI(tokenId, tokenURI(tokenId));\\r\\n    }\\r\\n\\r\\n    function _burn(uint256 _tokenId) internal override {\\r\\n        super._burn(_tokenId);\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        if (!reveal) {\\r\\n            return _placeholderURI;\\r\\n        }\\r\\n\\r\\n        string memory baseURI = _baseURI();\\r\\n        return\\r\\n            bytes(baseURI).length > 0\\r\\n                ? string(abi.encodePacked(baseURI, tokenId.toString(), \\\".json\\\"))\\r\\n                : \\\"\\\";\\r\\n    }\\r\\n\\r\\n    function payToMint(address recipiant, uint256 number) external payable {\\r\\n        require(!_whitelistActive, \\\"Public mint is not started yet!\\\");\\r\\n        require(msg.value >= price() * number, \\\"Money is not enough!\\\");\\r\\n        require(totalSupply() + number <= maxSupply(), \\\"Total supply exceeds max supply.\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < number; i++) {\\r\\n            uint256 newItemid = _tokenIdCounter.current();\\r\\n            _tokenIdCounter.increment();\\r\\n\\r\\n            _mint(recipiant, newItemid);\\r\\n        }\\r\\n\\r\\n        emit MintNFT(recipiant, number);\\r\\n    }\\r\\n\\r\\n    function payToWhiteMint(\\r\\n        address recipiant,\\r\\n        bytes32[] memory proof,\\r\\n        uint256 number\\r\\n    ) external payable {\\r\\n        require(_whitelistActive, \\\"Presale is not suppoted!\\\");\\r\\n        require(totalSupply() + number <= whitelistSaleAmount(), \\\"Total supply exceeds presale supply.\\\");\\r\\n\\r\\n        bool isWhitelisted = verifyWhitelist(_leaf(recipiant), proof);\\r\\n        require(isWhitelisted, \\\"Not whitelisted\\\");\\r\\n\\r\\n        require(msg.value >= price() * number, \\\"Money is not enough!\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < number; i++) {\\r\\n            uint256 newItemid = _tokenIdCounter.current();\\r\\n            _tokenIdCounter.increment();\\r\\n\\r\\n            _mint(recipiant, newItemid);\\r\\n        }\\r\\n\\r\\n        emit MintNFT(recipiant, number);\\r\\n    }\\r\\n\\r\\n    function withdraw() public onlyOwner {\\r\\n        payable(msg.sender).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    function _leaf(address account) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(account));\\r\\n    }\\r\\n\\r\\n    function verifyWhitelist(bytes32 leaf, bytes32[] memory proof)\\r\\n        public\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        bytes32 computedHash = leaf;\\r\\n\\r\\n        for (uint256 i = 0; i < proof.length; i++) {\\r\\n            bytes32 proofElement = proof[i];\\r\\n\\r\\n            if (computedHash < proofElement) {\\r\\n                // Hash(current computed hash + current element of the proof)\\r\\n                computedHash = keccak256(\\r\\n                    abi.encodePacked(computedHash, proofElement)\\r\\n                );\\r\\n            } else {\\r\\n                // Hash(current element of the proof + current computed hash)\\r\\n                computedHash = keccak256(\\r\\n                    abi.encodePacked(proofElement, computedHash)\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Check if the computed hash (root) is equal to the provided root\\r\\n        return computedHash == _root;\\r\\n    }\\r\\n\\r\\n    function whitelistRoot() external view returns (bytes32) {\\r\\n        return _root;\\r\\n    }\\r\\n\\r\\n    function setWhitelistRoot(bytes32 root) external onlyOwner {\\r\\n        _root = root;\\r\\n    }\\r\\n\\r\\n    function whitelistMode() external view returns (bool) {\\r\\n        return _whitelistActive;\\r\\n    }\\r\\n\\r\\n    function setWhiteListMode(bool mode) external onlyOwner {\\r\\n        _whitelistActive = mode;\\r\\n\\r\\n        emit WhitelistModeChanged(mode);\\r\\n    }\\r\\n}\",\"keccak256\":\"0xc6e5afd7ff5ee91ace6efffc36cd65eef8db567a0e471001e83b29cddad0f7b4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052670de0b6b3a7640000600a5566354a6ba7a18000600b55600e805460ff191690553480156200003257600080fd5b50604080518082018252601981527f416c746572204772696d61636520536f6369657479204e46540000000000000060208083019182528351808501909452600384526241475360e81b9084015281519192916200009391600091620001b4565b508051620000a9906001906020840190620001b4565b505050620000c6620000c06200015e60201b60201c565b62000162565b7f7036c18b7148a5450c499d5c83cf6dac05902701bbbca399f37345095ecf0dcb6009556040805160808101909152605180825262002881602083013980516200011991600c91602090910190620001b4565b50604051806080016040528060508152602001620028d26050913980516200014a91600d91602090910190620001b4565b506008805460ff1916600117905562000297565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620001c2906200025a565b90600052602060002090601f016020900481019282620001e6576000855562000231565b82601f106200020157805160ff191683800117855562000231565b8280016001018555821562000231579182015b828111156200023157825182559160200191906001019062000214565b506200023f92915062000243565b5090565b5b808211156200023f576000815560010162000244565b6002810460018216806200026f57607f821691505b602082108114156200029157634e487b7160e01b600052602260045260246000fd5b50919050565b6125da80620002a76000396000f3fe60806040526004361061020f5760003560e01c806370a0823111610118578063a22cb465116100a0578063c87b56dd1161006f578063c87b56dd14610595578063d5abeb01146105b5578063e985e9c5146105ca578063f2fde38b146105ea578063f5aa406d1461060a5761020f565b8063a22cb4651461052b578063a475b5dd1461054b578063b88d4fde14610560578063bb688421146105805761020f565b8063791a2519116100e7578063791a2519146104ac5780638da5cb5b146104cc57806395d89b41146104e1578063a035b1fe146104f6578063a14481941461050b5761020f565b806370a082311461044257806370c757ec14610462578063715018a61461047757806377a73a081461048c5761020f565b80632a3f300c1161019b5780633ccfd60b1161016a5780633ccfd60b146103ba57806342842e0e146103cf57806355f804b3146103ef5780636352211e1461040f57806365b31a661461042f5761020f565b80632a3f300c14610345578063329ea90d146103655780633549345e14610385578063386bfc98146103a55761020f565b806318160ddd116101e257806318160ddd146102bb5780631aa6fa0b146102dd5780631e23645f146102f057806323b872dd14610310578063268193b8146103305761020f565b806301ffc9a71461021457806306fdde031461024a578063081812fc1461026c578063095ea7b314610299575b600080fd5b34801561022057600080fd5b5061023461022f366004611cfe565b61062a565b6040516102419190611e63565b60405180910390f35b34801561025657600080fd5b5061025f610672565b6040516102419190611e77565b34801561027857600080fd5b5061028c610287366004611ca1565b610705565b6040516102419190611e12565b3480156102a557600080fd5b506102b96102b4366004611c5e565b610751565b005b3480156102c757600080fd5b506102d06107e9565b6040516102419190611e6e565b6102b96102eb366004611c5e565b6107fa565b3480156102fc57600080fd5b506102b961030b366004611c87565b61090e565b34801561031c57600080fd5b506102b961032b366004611b2c565b610996565b34801561033c57600080fd5b506102d06109ce565b34801561035157600080fd5b506102b9610360366004611c87565b6109d4565b34801561037157600080fd5b50610234610380366004611cb9565b610a26565b34801561039157600080fd5b506102b96103a0366004611ca1565b610ae3565b3480156103b157600080fd5b506102d0610b27565b3480156103c657600080fd5b506102b9610b2d565b3480156103db57600080fd5b506102b96103ea366004611b2c565b610b9b565b3480156103fb57600080fd5b506102b961040a366004611d36565b610bb6565b34801561041b57600080fd5b5061028c61042a366004611ca1565b610c0c565b6102b961043d366004611be0565b610c41565b34801561044e57600080fd5b506102d061045d366004611ae0565b610d89565b34801561046e57600080fd5b50610234610dcd565b34801561048357600080fd5b506102b9610dd6565b34801561049857600080fd5b506102b96104a7366004611d36565b610e21565b3480156104b857600080fd5b506102b96104c7366004611ca1565b610e73565b3480156104d857600080fd5b5061028c610eb7565b3480156104ed57600080fd5b5061025f610ec6565b34801561050257600080fd5b506102d0610ed5565b34801561051757600080fd5b506102b9610526366004611c5e565b610ef3565b34801561053757600080fd5b506102b9610546366004611c35565b610f72565b34801561055757600080fd5b50610234610f84565b34801561056c57600080fd5b506102b961057b366004611b67565b610f8d565b34801561058c57600080fd5b506102d0610fcc565b3480156105a157600080fd5b5061025f6105b0366004611ca1565b610fd2565b3480156105c157600080fd5b506102d06110f1565b3480156105d657600080fd5b506102346105e5366004611afa565b6110f7565b3480156105f657600080fd5b506102b9610605366004611ae0565b611125565b34801561061657600080fd5b506102b9610625366004611ca1565b611193565b60006001600160e01b031982166380ac58cd60e01b148061065b57506001600160e01b03198216635b5e139f60e01b145b8061066a575061066a826111d7565b90505b919050565b606060008054610681906124e2565b80601f01602080910402602001604051908101604052809291908181526020018280546106ad906124e2565b80156106fa5780601f106106cf576101008083540402835291602001916106fa565b820191906000526020600020905b8154815290600101906020018083116106dd57829003601f168201915b505050505090505b90565b6000610710826111f0565b6107355760405162461bcd60e51b815260040161072c906121f7565b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061075c82610c0c565b9050806001600160a01b0316836001600160a01b031614156107905760405162461bcd60e51b815260040161072c906122f5565b806001600160a01b03166107a261120d565b6001600160a01b031614806107be57506107be816105e561120d565b6107da5760405162461bcd60e51b815260040161072c906120a9565b6107e48383611211565b505050565b60006107f5600761127f565b905090565b60085460ff161561081d5760405162461bcd60e51b815260040161072c90612336565b80610826610ed5565b6108309190612480565b34101561084f5760405162461bcd60e51b815260040161072c90612243565b6108576110f1565b816108606107e9565b61086a9190612454565b11156108885760405162461bcd60e51b815260040161072c906123f5565b60005b818110156108c857600061089f600761127f565b90506108ab6007611283565b6108b5848261128c565b50806108c08161251d565b91505061088b565b50816001600160a01b03167f1f89f147a58d1673945cf416187db98efc8208408c011b91887acd59fd8523c3826040516109029190611e6e565b60405180910390a25050565b61091661120d565b6001600160a01b0316610927610eb7565b6001600160a01b03161461094d5760405162461bcd60e51b815260040161072c90612271565b6008805460ff19168215151790556040517f9094b093988cc7e117334d86adc047e84bbc414f34eb87fe4dd14fc3f623733d9061098b908390611e63565b60405180910390a150565b6109a76109a161120d565b82611373565b6109c35760405162461bcd60e51b815260040161072c9061236d565b6107e48383836113f8565b600f5481565b6109dc61120d565b6001600160a01b03166109ed610eb7565b6001600160a01b031614610a135760405162461bcd60e51b815260040161072c90612271565b600e805460ff1916911515919091179055565b600082815b8351811015610ad7576000848281518110610a5657634e487b7160e01b600052603260045260246000fd5b6020026020010151905080831015610a98578281604051602001610a7b929190611dc5565b604051602081830303815290604052805190602001209250610ac4565b8083604051602001610aab929190611dc5565b6040516020818303038152906040528051906020012092505b5080610acf8161251d565b915050610a2b565b50600954149392505050565b610aeb61120d565b6001600160a01b0316610afc610eb7565b6001600160a01b031614610b225760405162461bcd60e51b815260040161072c90612271565b600a55565b60095490565b610b3561120d565b6001600160a01b0316610b46610eb7565b6001600160a01b031614610b6c5760405162461bcd60e51b815260040161072c90612271565b60405133904780156108fc02916000818181858888f19350505050158015610b98573d6000803e3d6000fd5b50565b6107e483838360405180602001604052806000815250610f8d565b610bbe61120d565b6001600160a01b0316610bcf610eb7565b6001600160a01b031614610bf55760405162461bcd60e51b815260040161072c90612271565b8051610c0890600c906020840190611946565b5050565b6000818152600260205260408120546001600160a01b03168061066a5760405162461bcd60e51b815260040161072c90612179565b60085460ff16610c635760405162461bcd60e51b815260040161072c906123be565b610c6b610fcc565b81610c746107e9565b610c7e9190612454565b1115610c9c5760405162461bcd60e51b815260040161072c90611edc565b6000610cb0610caa8561152b565b84610a26565b905080610ccf5760405162461bcd60e51b815260040161072c90612106565b81610cd8610ed5565b610ce29190612480565b341015610d015760405162461bcd60e51b815260040161072c90612243565b60005b82811015610d41576000610d18600761127f565b9050610d246007611283565b610d2e868261128c565b5080610d398161251d565b915050610d04565b50836001600160a01b03167f1f89f147a58d1673945cf416187db98efc8208408c011b91887acd59fd8523c383604051610d7b9190611e6e565b60405180910390a250505050565b60006001600160a01b038216610db15760405162461bcd60e51b815260040161072c9061212f565b506001600160a01b031660009081526003602052604090205490565b60085460ff1690565b610dde61120d565b6001600160a01b0316610def610eb7565b6001600160a01b031614610e155760405162461bcd60e51b815260040161072c90612271565b610e1f600061155b565b565b610e2961120d565b6001600160a01b0316610e3a610eb7565b6001600160a01b031614610e605760405162461bcd60e51b815260040161072c90612271565b8051610c0890600d906020840190611946565b610e7b61120d565b6001600160a01b0316610e8c610eb7565b6001600160a01b031614610eb25760405162461bcd60e51b815260040161072c90612271565b600b55565b6006546001600160a01b031690565b606060018054610681906124e2565b60085460009060ff1615610eec5750600a54610702565b50600b5490565b610efb61120d565b6001600160a01b0316610f0c610eb7565b6001600160a01b031614610f325760405162461bcd60e51b815260040161072c90612271565b60005b818110156108c8576000610f49600761127f565b9050610f556007611283565b610f5f84826115ad565b5080610f6a8161251d565b915050610f35565b610c08610f7d61120d565b83836115c7565b600e5460ff1681565b610f9e610f9861120d565b83611373565b610fba5760405162461bcd60e51b815260040161072c9061236d565b610fc68484848461166a565b50505050565b6103e890565b6060610fdd826111f0565b610ff95760405162461bcd60e51b815260040161072c906122a6565b600e5460ff1661109557600d8054611010906124e2565b80601f016020809104026020016040519081016040528092919081815260200182805461103c906124e2565b80156110895780601f1061105e57610100808354040283529160200191611089565b820191906000526020600020905b81548152906001019060200180831161106c57829003601f168201915b5050505050905061066d565b600061109f61169d565b905060008151116110bf57604051806020016040528060008152506110ea565b806110c9846116ac565b6040516020016110da929190611dd3565b6040516020818303038152906040525b9392505050565b61131890565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61112d61120d565b6001600160a01b031661113e610eb7565b6001600160a01b0316146111645760405162461bcd60e51b815260040161072c90612271565b6001600160a01b03811661118a5760405162461bcd60e51b815260040161072c90611f20565b610b988161155b565b61119b61120d565b6001600160a01b03166111ac610eb7565b6001600160a01b0316146111d25760405162461bcd60e51b815260040161072c90612271565b600955565b6001600160e01b031981166301ffc9a760e01b14919050565b6000908152600260205260409020546001600160a01b0316151590565b3390565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061124682610c0c565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b5490565b80546001019055565b6001600160a01b0382166112b25760405162461bcd60e51b815260040161072c906121c2565b6112bb816111f0565b156112d85760405162461bcd60e51b815260040161072c90611fab565b6112e4600083836107e4565b6001600160a01b038216600090815260036020526040812080546001929061130d908490612454565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4610c08600083836107e4565b600061137e826111f0565b61139a5760405162461bcd60e51b815260040161072c9061205d565b60006113a583610c0c565b9050806001600160a01b0316846001600160a01b031614806113e05750836001600160a01b03166113d584610705565b6001600160a01b0316145b806113f057506113f081856110f7565b949350505050565b826001600160a01b031661140b82610c0c565b6001600160a01b0316146114315760405162461bcd60e51b815260040161072c90611f66565b6001600160a01b0382166114575760405162461bcd60e51b815260040161072c90611fe2565b6114628383836107e4565b61146d600082611211565b6001600160a01b038316600090815260036020526040812080546001929061149690849061249f565b90915550506001600160a01b03821660009081526003602052604081208054600192906114c4908490612454565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a46107e48383836107e4565b60008160405160200161153e9190611da8565b604051602081830303815290604052805190602001209050919050565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610c088282604051806020016040528060008152506117c7565b816001600160a01b0316836001600160a01b031614156115f95760405162461bcd60e51b815260040161072c90612026565b6001600160a01b0383811660008181526005602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319061165d908590611e63565b60405180910390a3505050565b6116758484846113f8565b611681848484846117fa565b610fc65760405162461bcd60e51b815260040161072c90611e8a565b6060600c8054610681906124e2565b6060816116d157506040805180820190915260018152600360fc1b602082015261066d565b8160005b81156116fb57806116e58161251d565b91506116f49050600a8361246c565b91506116d5565b60008167ffffffffffffffff81111561172457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561174e576020820181803683370190505b5090505b84156113f05761176360018361249f565b9150611770600a86612538565b61177b906030612454565b60f81b81838151811061179e57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506117c0600a8661246c565b9450611752565b6117d1838361128c565b6117de60008484846117fa565b6107e45760405162461bcd60e51b815260040161072c90611e8a565b600061180e846001600160a01b0316611915565b1561190a57836001600160a01b031663150b7a0261182a61120d565b8786866040518563ffffffff1660e01b815260040161184c9493929190611e26565b602060405180830381600087803b15801561186657600080fd5b505af1925050508015611896575060408051601f3d908101601f1916820190925261189391810190611d1a565b60015b6118f0573d8080156118c4576040519150601f19603f3d011682016040523d82523d6000602084013e6118c9565b606091505b5080516118e85760405162461bcd60e51b815260040161072c90611e8a565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506113f0565b506001949350505050565b600080826001600160a01b0316803b806020016040519081016040528181526000908060200190933c511192915050565b828054611952906124e2565b90600052602060002090601f01602090048101928261197457600085556119ba565b82601f1061198d57805160ff19168380011785556119ba565b828001600101855582156119ba579182015b828111156119ba57825182559160200191906001019061199f565b506119c69291506119ca565b5090565b5b808211156119c657600081556001016119cb565b600067ffffffffffffffff8311156119f9576119f9612578565b611a0c601f8401601f191660200161242a565b9050828152838383011115611a2057600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b038116811461066d57600080fd5b600082601f830112611a5e578081fd5b8135602067ffffffffffffffff821115611a7a57611a7a612578565b808202611a8882820161242a565b838152828101908684018388018501891015611aa2578687fd5b8693505b85841015611ac4578035835260019390930192918401918401611aa6565b50979650505050505050565b8035801515811461066d57600080fd5b600060208284031215611af1578081fd5b6110ea82611a37565b60008060408385031215611b0c578081fd5b611b1583611a37565b9150611b2360208401611a37565b90509250929050565b600080600060608486031215611b40578081fd5b611b4984611a37565b9250611b5760208501611a37565b9150604084013590509250925092565b60008060008060808587031215611b7c578081fd5b611b8585611a37565b9350611b9360208601611a37565b925060408501359150606085013567ffffffffffffffff811115611bb5578182fd5b8501601f81018713611bc5578182fd5b611bd4878235602084016119df565b91505092959194509250565b600080600060608486031215611bf4578283fd5b611bfd84611a37565b9250602084013567ffffffffffffffff811115611c18578283fd5b611c2486828701611a4e565b925050604084013590509250925092565b60008060408385031215611c47578182fd5b611c5083611a37565b9150611b2360208401611ad0565b60008060408385031215611c70578182fd5b611c7983611a37565b946020939093013593505050565b600060208284031215611c98578081fd5b6110ea82611ad0565b600060208284031215611cb2578081fd5b5035919050565b60008060408385031215611ccb578182fd5b82359150602083013567ffffffffffffffff811115611ce8578182fd5b611cf485828601611a4e565b9150509250929050565b600060208284031215611d0f578081fd5b81356110ea8161258e565b600060208284031215611d2b578081fd5b81516110ea8161258e565b600060208284031215611d47578081fd5b813567ffffffffffffffff811115611d5d578182fd5b8201601f81018413611d6d578182fd5b6113f0848235602084016119df565b60008151808452611d948160208601602086016124b6565b601f01601f19169290920160200192915050565b60609190911b6bffffffffffffffffffffffff1916815260140190565b918252602082015260400190565b60008351611de58184602088016124b6565b835190830190611df98183602088016124b6565b64173539b7b760d91b9101908152600501949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611e5990830184611d7c565b9695505050505050565b901515815260200190565b90815260200190565b6000602082526110ea6020830184611d7c565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526024908201527f546f74616c20737570706c7920657863656564732070726573616c652073757060408201526338363c9760e11b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252600f908201526e139bdd081dda1a5d195b1a5cdd1959608a1b604082015260600190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201526832b73a103a37b5b2b760b91b606082015260800190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b6020808252601490820152734d6f6e6579206973206e6f7420656e6f7567682160601b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b6020808252601f908201527f5075626c6963206d696e74206973206e6f742073746172746564207965742100604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60208082526018908201527f50726573616c65206973206e6f7420737570706f746564210000000000000000604082015260600190565b6020808252818101527f546f74616c20737570706c792065786365656473206d617820737570706c792e604082015260600190565b60405181810167ffffffffffffffff8111828210171561244c5761244c612578565b604052919050565b600082198211156124675761246761254c565b500190565b60008261247b5761247b612562565b500490565b600081600019048311821515161561249a5761249a61254c565b500290565b6000828210156124b1576124b161254c565b500390565b60005b838110156124d15781810151838201526020016124b9565b83811115610fc65750506000910152565b6002810460018216806124f657607f821691505b6020821081141561251757634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156125315761253161254c565b5060010190565b60008261254757612547612562565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610b9857600080fdfea2646970667358221220465b3ac5717ddd23cb6514c57e4627f904a2d75c7ca2f5dd0d4b24c4186293d964736f6c6343000800003368747470733a2f2f676174657761792e70696e6174612e636c6f75642f697066732f516d55675244366a6b4d356b664a4d36436354466576653937746962696d6e5370336950517a554331526e736b662f68747470733a2f2f676174657761792e70696e6174612e636c6f75642f697066732f516d515446424c3444454e466771475532565a507934475a416a324d546d7a4464736f446a72533436416b487854",
  "deployedBytecode": "0x60806040526004361061020f5760003560e01c806370a0823111610118578063a22cb465116100a0578063c87b56dd1161006f578063c87b56dd14610595578063d5abeb01146105b5578063e985e9c5146105ca578063f2fde38b146105ea578063f5aa406d1461060a5761020f565b8063a22cb4651461052b578063a475b5dd1461054b578063b88d4fde14610560578063bb688421146105805761020f565b8063791a2519116100e7578063791a2519146104ac5780638da5cb5b146104cc57806395d89b41146104e1578063a035b1fe146104f6578063a14481941461050b5761020f565b806370a082311461044257806370c757ec14610462578063715018a61461047757806377a73a081461048c5761020f565b80632a3f300c1161019b5780633ccfd60b1161016a5780633ccfd60b146103ba57806342842e0e146103cf57806355f804b3146103ef5780636352211e1461040f57806365b31a661461042f5761020f565b80632a3f300c14610345578063329ea90d146103655780633549345e14610385578063386bfc98146103a55761020f565b806318160ddd116101e257806318160ddd146102bb5780631aa6fa0b146102dd5780631e23645f146102f057806323b872dd14610310578063268193b8146103305761020f565b806301ffc9a71461021457806306fdde031461024a578063081812fc1461026c578063095ea7b314610299575b600080fd5b34801561022057600080fd5b5061023461022f366004611cfe565b61062a565b6040516102419190611e63565b60405180910390f35b34801561025657600080fd5b5061025f610672565b6040516102419190611e77565b34801561027857600080fd5b5061028c610287366004611ca1565b610705565b6040516102419190611e12565b3480156102a557600080fd5b506102b96102b4366004611c5e565b610751565b005b3480156102c757600080fd5b506102d06107e9565b6040516102419190611e6e565b6102b96102eb366004611c5e565b6107fa565b3480156102fc57600080fd5b506102b961030b366004611c87565b61090e565b34801561031c57600080fd5b506102b961032b366004611b2c565b610996565b34801561033c57600080fd5b506102d06109ce565b34801561035157600080fd5b506102b9610360366004611c87565b6109d4565b34801561037157600080fd5b50610234610380366004611cb9565b610a26565b34801561039157600080fd5b506102b96103a0366004611ca1565b610ae3565b3480156103b157600080fd5b506102d0610b27565b3480156103c657600080fd5b506102b9610b2d565b3480156103db57600080fd5b506102b96103ea366004611b2c565b610b9b565b3480156103fb57600080fd5b506102b961040a366004611d36565b610bb6565b34801561041b57600080fd5b5061028c61042a366004611ca1565b610c0c565b6102b961043d366004611be0565b610c41565b34801561044e57600080fd5b506102d061045d366004611ae0565b610d89565b34801561046e57600080fd5b50610234610dcd565b34801561048357600080fd5b506102b9610dd6565b34801561049857600080fd5b506102b96104a7366004611d36565b610e21565b3480156104b857600080fd5b506102b96104c7366004611ca1565b610e73565b3480156104d857600080fd5b5061028c610eb7565b3480156104ed57600080fd5b5061025f610ec6565b34801561050257600080fd5b506102d0610ed5565b34801561051757600080fd5b506102b9610526366004611c5e565b610ef3565b34801561053757600080fd5b506102b9610546366004611c35565b610f72565b34801561055757600080fd5b50610234610f84565b34801561056c57600080fd5b506102b961057b366004611b67565b610f8d565b34801561058c57600080fd5b506102d0610fcc565b3480156105a157600080fd5b5061025f6105b0366004611ca1565b610fd2565b3480156105c157600080fd5b506102d06110f1565b3480156105d657600080fd5b506102346105e5366004611afa565b6110f7565b3480156105f657600080fd5b506102b9610605366004611ae0565b611125565b34801561061657600080fd5b506102b9610625366004611ca1565b611193565b60006001600160e01b031982166380ac58cd60e01b148061065b57506001600160e01b03198216635b5e139f60e01b145b8061066a575061066a826111d7565b90505b919050565b606060008054610681906124e2565b80601f01602080910402602001604051908101604052809291908181526020018280546106ad906124e2565b80156106fa5780601f106106cf576101008083540402835291602001916106fa565b820191906000526020600020905b8154815290600101906020018083116106dd57829003601f168201915b505050505090505b90565b6000610710826111f0565b6107355760405162461bcd60e51b815260040161072c906121f7565b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061075c82610c0c565b9050806001600160a01b0316836001600160a01b031614156107905760405162461bcd60e51b815260040161072c906122f5565b806001600160a01b03166107a261120d565b6001600160a01b031614806107be57506107be816105e561120d565b6107da5760405162461bcd60e51b815260040161072c906120a9565b6107e48383611211565b505050565b60006107f5600761127f565b905090565b60085460ff161561081d5760405162461bcd60e51b815260040161072c90612336565b80610826610ed5565b6108309190612480565b34101561084f5760405162461bcd60e51b815260040161072c90612243565b6108576110f1565b816108606107e9565b61086a9190612454565b11156108885760405162461bcd60e51b815260040161072c906123f5565b60005b818110156108c857600061089f600761127f565b90506108ab6007611283565b6108b5848261128c565b50806108c08161251d565b91505061088b565b50816001600160a01b03167f1f89f147a58d1673945cf416187db98efc8208408c011b91887acd59fd8523c3826040516109029190611e6e565b60405180910390a25050565b61091661120d565b6001600160a01b0316610927610eb7565b6001600160a01b03161461094d5760405162461bcd60e51b815260040161072c90612271565b6008805460ff19168215151790556040517f9094b093988cc7e117334d86adc047e84bbc414f34eb87fe4dd14fc3f623733d9061098b908390611e63565b60405180910390a150565b6109a76109a161120d565b82611373565b6109c35760405162461bcd60e51b815260040161072c9061236d565b6107e48383836113f8565b600f5481565b6109dc61120d565b6001600160a01b03166109ed610eb7565b6001600160a01b031614610a135760405162461bcd60e51b815260040161072c90612271565b600e805460ff1916911515919091179055565b600082815b8351811015610ad7576000848281518110610a5657634e487b7160e01b600052603260045260246000fd5b6020026020010151905080831015610a98578281604051602001610a7b929190611dc5565b604051602081830303815290604052805190602001209250610ac4565b8083604051602001610aab929190611dc5565b6040516020818303038152906040528051906020012092505b5080610acf8161251d565b915050610a2b565b50600954149392505050565b610aeb61120d565b6001600160a01b0316610afc610eb7565b6001600160a01b031614610b225760405162461bcd60e51b815260040161072c90612271565b600a55565b60095490565b610b3561120d565b6001600160a01b0316610b46610eb7565b6001600160a01b031614610b6c5760405162461bcd60e51b815260040161072c90612271565b60405133904780156108fc02916000818181858888f19350505050158015610b98573d6000803e3d6000fd5b50565b6107e483838360405180602001604052806000815250610f8d565b610bbe61120d565b6001600160a01b0316610bcf610eb7565b6001600160a01b031614610bf55760405162461bcd60e51b815260040161072c90612271565b8051610c0890600c906020840190611946565b5050565b6000818152600260205260408120546001600160a01b03168061066a5760405162461bcd60e51b815260040161072c90612179565b60085460ff16610c635760405162461bcd60e51b815260040161072c906123be565b610c6b610fcc565b81610c746107e9565b610c7e9190612454565b1115610c9c5760405162461bcd60e51b815260040161072c90611edc565b6000610cb0610caa8561152b565b84610a26565b905080610ccf5760405162461bcd60e51b815260040161072c90612106565b81610cd8610ed5565b610ce29190612480565b341015610d015760405162461bcd60e51b815260040161072c90612243565b60005b82811015610d41576000610d18600761127f565b9050610d246007611283565b610d2e868261128c565b5080610d398161251d565b915050610d04565b50836001600160a01b03167f1f89f147a58d1673945cf416187db98efc8208408c011b91887acd59fd8523c383604051610d7b9190611e6e565b60405180910390a250505050565b60006001600160a01b038216610db15760405162461bcd60e51b815260040161072c9061212f565b506001600160a01b031660009081526003602052604090205490565b60085460ff1690565b610dde61120d565b6001600160a01b0316610def610eb7565b6001600160a01b031614610e155760405162461bcd60e51b815260040161072c90612271565b610e1f600061155b565b565b610e2961120d565b6001600160a01b0316610e3a610eb7565b6001600160a01b031614610e605760405162461bcd60e51b815260040161072c90612271565b8051610c0890600d906020840190611946565b610e7b61120d565b6001600160a01b0316610e8c610eb7565b6001600160a01b031614610eb25760405162461bcd60e51b815260040161072c90612271565b600b55565b6006546001600160a01b031690565b606060018054610681906124e2565b60085460009060ff1615610eec5750600a54610702565b50600b5490565b610efb61120d565b6001600160a01b0316610f0c610eb7565b6001600160a01b031614610f325760405162461bcd60e51b815260040161072c90612271565b60005b818110156108c8576000610f49600761127f565b9050610f556007611283565b610f5f84826115ad565b5080610f6a8161251d565b915050610f35565b610c08610f7d61120d565b83836115c7565b600e5460ff1681565b610f9e610f9861120d565b83611373565b610fba5760405162461bcd60e51b815260040161072c9061236d565b610fc68484848461166a565b50505050565b6103e890565b6060610fdd826111f0565b610ff95760405162461bcd60e51b815260040161072c906122a6565b600e5460ff1661109557600d8054611010906124e2565b80601f016020809104026020016040519081016040528092919081815260200182805461103c906124e2565b80156110895780601f1061105e57610100808354040283529160200191611089565b820191906000526020600020905b81548152906001019060200180831161106c57829003601f168201915b5050505050905061066d565b600061109f61169d565b905060008151116110bf57604051806020016040528060008152506110ea565b806110c9846116ac565b6040516020016110da929190611dd3565b6040516020818303038152906040525b9392505050565b61131890565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61112d61120d565b6001600160a01b031661113e610eb7565b6001600160a01b0316146111645760405162461bcd60e51b815260040161072c90612271565b6001600160a01b03811661118a5760405162461bcd60e51b815260040161072c90611f20565b610b988161155b565b61119b61120d565b6001600160a01b03166111ac610eb7565b6001600160a01b0316146111d25760405162461bcd60e51b815260040161072c90612271565b600955565b6001600160e01b031981166301ffc9a760e01b14919050565b6000908152600260205260409020546001600160a01b0316151590565b3390565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061124682610c0c565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b5490565b80546001019055565b6001600160a01b0382166112b25760405162461bcd60e51b815260040161072c906121c2565b6112bb816111f0565b156112d85760405162461bcd60e51b815260040161072c90611fab565b6112e4600083836107e4565b6001600160a01b038216600090815260036020526040812080546001929061130d908490612454565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4610c08600083836107e4565b600061137e826111f0565b61139a5760405162461bcd60e51b815260040161072c9061205d565b60006113a583610c0c565b9050806001600160a01b0316846001600160a01b031614806113e05750836001600160a01b03166113d584610705565b6001600160a01b0316145b806113f057506113f081856110f7565b949350505050565b826001600160a01b031661140b82610c0c565b6001600160a01b0316146114315760405162461bcd60e51b815260040161072c90611f66565b6001600160a01b0382166114575760405162461bcd60e51b815260040161072c90611fe2565b6114628383836107e4565b61146d600082611211565b6001600160a01b038316600090815260036020526040812080546001929061149690849061249f565b90915550506001600160a01b03821660009081526003602052604081208054600192906114c4908490612454565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a46107e48383836107e4565b60008160405160200161153e9190611da8565b604051602081830303815290604052805190602001209050919050565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610c088282604051806020016040528060008152506117c7565b816001600160a01b0316836001600160a01b031614156115f95760405162461bcd60e51b815260040161072c90612026565b6001600160a01b0383811660008181526005602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319061165d908590611e63565b60405180910390a3505050565b6116758484846113f8565b611681848484846117fa565b610fc65760405162461bcd60e51b815260040161072c90611e8a565b6060600c8054610681906124e2565b6060816116d157506040805180820190915260018152600360fc1b602082015261066d565b8160005b81156116fb57806116e58161251d565b91506116f49050600a8361246c565b91506116d5565b60008167ffffffffffffffff81111561172457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561174e576020820181803683370190505b5090505b84156113f05761176360018361249f565b9150611770600a86612538565b61177b906030612454565b60f81b81838151811061179e57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506117c0600a8661246c565b9450611752565b6117d1838361128c565b6117de60008484846117fa565b6107e45760405162461bcd60e51b815260040161072c90611e8a565b600061180e846001600160a01b0316611915565b1561190a57836001600160a01b031663150b7a0261182a61120d565b8786866040518563ffffffff1660e01b815260040161184c9493929190611e26565b602060405180830381600087803b15801561186657600080fd5b505af1925050508015611896575060408051601f3d908101601f1916820190925261189391810190611d1a565b60015b6118f0573d8080156118c4576040519150601f19603f3d011682016040523d82523d6000602084013e6118c9565b606091505b5080516118e85760405162461bcd60e51b815260040161072c90611e8a565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506113f0565b506001949350505050565b600080826001600160a01b0316803b806020016040519081016040528181526000908060200190933c511192915050565b828054611952906124e2565b90600052602060002090601f01602090048101928261197457600085556119ba565b82601f1061198d57805160ff19168380011785556119ba565b828001600101855582156119ba579182015b828111156119ba57825182559160200191906001019061199f565b506119c69291506119ca565b5090565b5b808211156119c657600081556001016119cb565b600067ffffffffffffffff8311156119f9576119f9612578565b611a0c601f8401601f191660200161242a565b9050828152838383011115611a2057600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b038116811461066d57600080fd5b600082601f830112611a5e578081fd5b8135602067ffffffffffffffff821115611a7a57611a7a612578565b808202611a8882820161242a565b838152828101908684018388018501891015611aa2578687fd5b8693505b85841015611ac4578035835260019390930192918401918401611aa6565b50979650505050505050565b8035801515811461066d57600080fd5b600060208284031215611af1578081fd5b6110ea82611a37565b60008060408385031215611b0c578081fd5b611b1583611a37565b9150611b2360208401611a37565b90509250929050565b600080600060608486031215611b40578081fd5b611b4984611a37565b9250611b5760208501611a37565b9150604084013590509250925092565b60008060008060808587031215611b7c578081fd5b611b8585611a37565b9350611b9360208601611a37565b925060408501359150606085013567ffffffffffffffff811115611bb5578182fd5b8501601f81018713611bc5578182fd5b611bd4878235602084016119df565b91505092959194509250565b600080600060608486031215611bf4578283fd5b611bfd84611a37565b9250602084013567ffffffffffffffff811115611c18578283fd5b611c2486828701611a4e565b925050604084013590509250925092565b60008060408385031215611c47578182fd5b611c5083611a37565b9150611b2360208401611ad0565b60008060408385031215611c70578182fd5b611c7983611a37565b946020939093013593505050565b600060208284031215611c98578081fd5b6110ea82611ad0565b600060208284031215611cb2578081fd5b5035919050565b60008060408385031215611ccb578182fd5b82359150602083013567ffffffffffffffff811115611ce8578182fd5b611cf485828601611a4e565b9150509250929050565b600060208284031215611d0f578081fd5b81356110ea8161258e565b600060208284031215611d2b578081fd5b81516110ea8161258e565b600060208284031215611d47578081fd5b813567ffffffffffffffff811115611d5d578182fd5b8201601f81018413611d6d578182fd5b6113f0848235602084016119df565b60008151808452611d948160208601602086016124b6565b601f01601f19169290920160200192915050565b60609190911b6bffffffffffffffffffffffff1916815260140190565b918252602082015260400190565b60008351611de58184602088016124b6565b835190830190611df98183602088016124b6565b64173539b7b760d91b9101908152600501949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611e5990830184611d7c565b9695505050505050565b901515815260200190565b90815260200190565b6000602082526110ea6020830184611d7c565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526024908201527f546f74616c20737570706c7920657863656564732070726573616c652073757060408201526338363c9760e11b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252600f908201526e139bdd081dda1a5d195b1a5cdd1959608a1b604082015260600190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201526832b73a103a37b5b2b760b91b606082015260800190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b6020808252601490820152734d6f6e6579206973206e6f7420656e6f7567682160601b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b6020808252601f908201527f5075626c6963206d696e74206973206e6f742073746172746564207965742100604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60208082526018908201527f50726573616c65206973206e6f7420737570706f746564210000000000000000604082015260600190565b6020808252818101527f546f74616c20737570706c792065786365656473206d617820737570706c792e604082015260600190565b60405181810167ffffffffffffffff8111828210171561244c5761244c612578565b604052919050565b600082198211156124675761246761254c565b500190565b60008261247b5761247b612562565b500490565b600081600019048311821515161561249a5761249a61254c565b500290565b6000828210156124b1576124b161254c565b500390565b60005b838110156124d15781810151838201526020016124b9565b83811115610fc65750506000910152565b6002810460018216806124f657607f821691505b6020821081141561251757634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156125315761253161254c565b5060010190565b60008261254757612547612562565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610b9857600080fdfea2646970667358221220465b3ac5717ddd23cb6514c57e4627f904a2d75c7ca2f5dd0d4b24c4186293d964736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 716,
        "contract": "contracts/AgsNFT.sol:AgsNFT",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 718,
        "contract": "contracts/AgsNFT.sol:AgsNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 722,
        "contract": "contracts/AgsNFT.sol:AgsNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 726,
        "contract": "contracts/AgsNFT.sol:AgsNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 730,
        "contract": "contracts/AgsNFT.sol:AgsNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 736,
        "contract": "contracts/AgsNFT.sol:AgsNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1561,
        "contract": "contracts/AgsNFT.sol:AgsNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 1744,
        "contract": "contracts/AgsNFT.sol:AgsNFT",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(Counter)1662_storage"
      },
      {
        "astId": 1746,
        "contract": "contracts/AgsNFT.sol:AgsNFT",
        "label": "_whitelistActive",
        "offset": 0,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 1748,
        "contract": "contracts/AgsNFT.sol:AgsNFT",
        "label": "_root",
        "offset": 0,
        "slot": "9",
        "type": "t_bytes32"
      },
      {
        "astId": 1755,
        "contract": "contracts/AgsNFT.sol:AgsNFT",
        "label": "presalePrice",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1762,
        "contract": "contracts/AgsNFT.sol:AgsNFT",
        "label": "publicSalePrice",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1764,
        "contract": "contracts/AgsNFT.sol:AgsNFT",
        "label": "_strBaseTokenURI",
        "offset": 0,
        "slot": "12",
        "type": "t_string_storage"
      },
      {
        "astId": 1766,
        "contract": "contracts/AgsNFT.sol:AgsNFT",
        "label": "_placeholderURI",
        "offset": 0,
        "slot": "13",
        "type": "t_string_storage"
      },
      {
        "astId": 1769,
        "contract": "contracts/AgsNFT.sol:AgsNFT",
        "label": "reveal",
        "offset": 0,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 1771,
        "contract": "contracts/AgsNFT.sol:AgsNFT",
        "label": "boostRates",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1662_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1661,
            "contract": "contracts/AgsNFT.sol:AgsNFT",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}